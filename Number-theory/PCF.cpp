#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int,int>
#define pll pair<ll,ll>
#define vi vector<int>
#define vll vector<ll>
#define vc vector<char>
#define vs vector<string>
#define vpll vector<pll>
#define vpii vector<pii>
#define umap unordered_map
#define uset unordered_set
#define PQ priority_queue

#define printa(a,L,R) for(int i=L;i<R;i++) cout<<a[i]<<(i==R-1?'\n':' ')
#define printv(a) printa(a,0,a.size())
#define print2d(a,r,c) for(int i=0;i<r;i++) for(int j=0;j<c;j++) cout<<a[i][j]<<(j==c-1?'\n':' ')
#define pb push_back
#define eb emplace_back
#define mt make_tuple
#define fbo find_by_order
#define ook order_of_key
#define MP make_pair
#define UB upper_bound
#define LB lower_bound
#define SQ(x) ((x)*(x))
#define issq(x) (((ll)(sqrt((x))))*((ll)(sqrt((x))))==(x))
#define F first
#define S second
#define mem(a,x) memset(a,x,sizeof(a))
#define inf 1e18
#define E 2.71828182845904523536
#define gamma 0.5772156649
#define nl "\n"
#define lg(r,n) (int)(log2(n)/log2(r))
#define pf printf
#define sf scanf
#define sf1(a)                scanf("%d",&a)
#define sf2(a,b)              scanf("%d %d",&a,&b)
#define sf3(a,b,c)            scanf("%d %d %d",&a,&b,&c)
#define pf1(a)                printf("%d\n",a);
#define pf2(a,b)              printf("%d %d\n",a,b)
#define pf3(a,b,c)            printf("%d %d %d\n",a,b,c)
#define sf1ll(a)              scanf("%lld",&a)
#define sf2ll(a,b)            scanf("%I64d %I64d",&a,&b)
#define sf3ll(a,b,c)          scanf("%I64d %I64d %I64d",&a,&b,&c)
#define pf1ll(a)              printf("%lld\n",a);
#define pf2ll(a,b)            printf("%I64d %I64d\n",a,b)
#define pf3ll(a,b,c)          printf("%I64d %I64d %I64d\n",a,b,c)
#define _ccase printf("Case %lld: ",++cs)
#define _case cout<<"Case "<<++cs<<": "
#define by(x) [](const auto& a, const auto& b) { return a.x < b.x; }

#define asche cerr<<"Ekhane asche\n";
#define rev(v) reverse(v.begin(),v.end())
#define srt(v) sort(v.begin(),v.end())
#define grtsrt(v) sort(v.begin(),v.end(),greater<ll>())
#define all(v) v.begin(),v.end()
#define mnv(v) *min_element(v.begin(),v.end())
#define mxv(v) *max_element(v.begin(),v.end())
#define toint(a) atoi(a.c_str())
#define BeatMeScanf ios_base::sync_with_stdio(false)
#define valid(tx,ty) (tx>=0&&tx<n&&ty>=0&&ty<m)
#define one(x) __builtin_popcount(x)
#define Unique(v) v.erase(unique(all(v)),v.end())
#define stree l=(n<<1),r=l+1,mid=b+(e-b)/2
#define fout(x) fixed<<setprecision(x)
string tostr(int n)
{
    stringstream rr;
    rr<<n;
    return rr.str();
}
inline void yes()
{
    cout<<"YES\n";
    exit(0);
}
inline void no()
{
    cout<<"NO\n";
    exit(0);
}
template <typename T> using o_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//ll dx[]={1,0,-1,0,1,-1,-1,1};
//ll dy[]={0,1,0,-1,1,1,-1,-1};
//random_device rd;
//mt19937 random(rd());
#define debug(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); deb(_it, args); }
void deb(istream_iterator<string> it) {}
template<typename T, typename... Args>
void deb(istream_iterator<string> it, T a, Args... args)
{
    cerr << *it << " = " << a << endl;
    deb(++it, args...);
}

const int mod=1e9+7;
const int N=3e6+9;
const ld eps=1e-9;
const ld PI=acos(-1.0);
//ll gcd(ll a,ll b){while(b){ll x=a%b;a=b;b=x;}return a;}
//ll lcm(ll a,ll b){return a/gcd(a,b)*b;}
//ll qpow(ll n,ll k) {ll ans=1;assert(k>=0);n%=mod;while(k>0){if(k&1) ans=(ans*n)%mod;n=(n*n)%mod;k>>=1;}return ans%mod;}

namespace pcf
{
///   Prime-Counting Function
///   initialize once by calling init()
///   Legendre(n) and Lehmer(n) returns the number of primes less than or equal to n
///   Lehmer(n) is faster

#define MAXN 2000010 /// initial sieve limit
#define MAX_PRIMES 2000010 /// max size of the prime array for sieve
#define PHI_N 100000
#define PHI_K 100

unsigned int ar[(MAXN >> 6) + 5] = {0};
ll len = 0; /// total number of primes generated by sieve
ll primes[MAX_PRIMES];
ll counter[MAXN]; /// counter[m] --> number of primes <= i
ll phi_dp[PHI_N][PHI_K]; /// precal of phi(n,k)

bitset <MAXN> isComp;
//bool isComp[MAXN];
void Sieve(int N)
{
    int  i,j,sq = sqrt(N);
    isComp[1] = true;
    for(i=4; i<=N; i+=2) isComp[i] = true;
    for(i=3; i<=sq; i+=2)
    {
        if(!isComp[i])
        {
            for(j=i*i; j<=N; j+=i+i) isComp[j] = 1;
        }
    }
    for (i = 1; i <= N; i++)
    {
        if (!isComp[i]) primes[len++] = i;
        counter[i] = len;
    }
}

void init()
{
    Sieve(MAXN - 1);

    /// precalculation of phi upto size (PHI_N,PHI_K)
    int k, n, res;
    for(n = 0; n < PHI_N; n++) phi_dp[n][0] = n;
    for (k = 1; k < PHI_K; k++)
    {
        for (n = 0; n < PHI_N; n++)
        {
            phi_dp[n][k] = phi_dp[n][k - 1] - phi_dp[n / primes[k - 1]][k - 1];
        }
    }
}

/// returns number of integers less or equal n which are
/// not divisible by any of the first k primes
/// recurrence --> phi( n , k ) = phi( n , k-1 ) - phi( n / p_k , k-1)
long long phi(long long n, int k)
{
    if (n < PHI_N && k < PHI_K) return phi_dp[n][k];
    if (k == 1) return ((++n) >> 1);
    if (primes[k - 1] >= n) return 1;
    return phi(n, k - 1) - phi(n / primes[k - 1], k - 1);
}


long long Legendre(long long n)
{
    if (n < MAXN) return counter[n];

    int lim = sqrt(n) + 1;
    int k = upper_bound(primes, primes + len, lim) - primes;
    return phi(n, k) + (k - 1);
}

///complexity: n^(2/3).(logn)^(1/3)
long long Lehmer(long long n)
{
    if (n < MAXN) return counter[n];

    long long w, res = 0;
    ll i, j, a, b, c, lim;
    b = sqrt(n), c = Lehmer(cbrt(n)), a = Lehmer(sqrt(b)), b = Lehmer(b);
    res = phi(n, a) + (((b + a - 2) * (b - a + 1)) >> 1);

    for (i = a; i < b; i++)
    {
        w = n / primes[i];
        lim = Lehmer(sqrt(w)), res -= Lehmer(w);

        if (i <= c)
        {
            for (j = i; j < lim; j++)
            {
                res += j;
                res -= Lehmer(w / primes[j]);
            }
        }
    }
    return res;
}
}


int main()
{
    BeatMeScanf;
    ll i,j,k,n,m,ans=0;
    pcf::init();
    cin>>n;
    cout << pcf::Lehmer(n) << endl;




    }
